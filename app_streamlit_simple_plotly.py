#!/usr/bin/env python3
"""
Dashboard de An√°lise de Sentimento - Olist Reviews (Vers√£o Simplificada)
Aplica√ß√£o Streamlit otimizada para ambientes cloud sem matplotlib
"""

import streamlit as st
import pandas as pd
import numpy as np
from collections import Counter
import re
import nltk
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sys
import os

# Adiciona o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# Importa√ß√µes dos m√≥dulos do projeto
try:
    from olist_reviews.config import Config
    from olist_reviews.rag.vector_store import VectorStore
    from olist_reviews.sentiment.sentiment_analyzer import SentimentAnalyzer
    MODULES_AVAILABLE = True
except ImportError as e:
    st.warning(f"‚ö†Ô∏è M√≥dulos n√£o dispon√≠veis: {e}")
    MODULES_AVAILABLE = False

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Olist Reviews",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Download dos recursos do NLTK
@st.cache_resource
def download_nltk_resources():
    """Download dos recursos necess√°rios do NLTK"""
    try:
        nltk.download('punkt', quiet=True)
        nltk.download('stopwords', quiet=True)
    except:
        st.warning("‚ö†Ô∏è Erro ao baixar recursos do NLTK.")

download_nltk_resources()

# Estilo CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        color: #1f77b4;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """Carrega os dados do dataset"""
    try:
        # Tenta usar o caminho configurado
        if MODULES_AVAILABLE:
            dataset_path = Config.DATASET_PATH
        else:
            dataset_path = "data/olist_order_reviews_dataset.csv"
        
        if not os.path.exists(dataset_path):
            st.error(f"‚ùå Arquivo n√£o encontrado: {dataset_path}")
            return None
        
        df = pd.read_csv(dataset_path)
        
        # Processamento b√°sico
        df['review_creation_date'] = pd.to_datetime(df['review_creation_date'], errors='coerce')
        df = df.dropna(subset=['review_creation_date'])
        df['review_comment_message'] = df['review_comment_message'].fillna('')
        df = df[df['review_comment_message'].str.len() > 10]
        
        # Adiciona colunas √∫teis
        df['year'] = df['review_creation_date'].dt.year
        df['month'] = df['review_creation_date'].dt.month
        
        return df
    
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados: {e}")
        return None

def clean_text(text):
    """Limpa texto para an√°lise"""
    if pd.isna(text) or text == '':
        return ''
    
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\d+', '', text)
    text = ' '.join(text.split())
    
    return text

def get_stopwords():
    """Retorna stopwords em portugu√™s"""
    try:
        from nltk.corpus import stopwords
        return set(stopwords.words('portuguese'))
    except:
        return {
            'a', 'o', 'e', '√©', 'de', 'do', 'da', 'em', 'um', 'para', 'com', 'n√£o', 'uma',
            'os', 'as', 'que', 'se', 'na', 'por', 'mais', 'como', 'mas', 'foi', 'ele',
            'das', 'tem', '√†', 'seu', 'sua', 'ou', 'ser', 'quando', 'muito', 'h√°', 'nos',
            'j√°', 'est√°', 'eu', 'tamb√©m', 's√≥', 'pelo', 'pela', 'at√©', 'isso', 'ela'
        }

def get_word_frequency(texts, stop_words, top_n=10):
    """Calcula frequ√™ncia de palavras"""
    all_words = []
    
    for text in texts:
        if pd.isna(text) or text == '':
            continue
        
        clean_text_str = clean_text(text)
        words = clean_text_str.split()
        words = [word for word in words if word not in stop_words and len(word) > 2]
        all_words.extend(words)
    
    word_counts = Counter(all_words)
    return word_counts.most_common(top_n)

def main():
    """Fun√ß√£o principal"""
    # Cabe√ßalho
    st.markdown('<h1 class="main-header">üìä Dashboard Olist Reviews</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">An√°lise de sentimentos e insights dos reviews</p>', unsafe_allow_html=True)
    
    # Carrega dados
    with st.spinner('üîÑ Carregando dados...'):
        df = load_data()
    
    if df is None:
        st.error("‚ùå N√£o foi poss√≠vel carregar os dados.")
        return
    
    # Sidebar com informa√ß√µes
    st.sidebar.markdown("## üìà Informa√ß√µes")
    st.sidebar.metric("Total de Reviews", f"{len(df):,}")
    st.sidebar.metric("Per√≠odo", f"{df['year'].min()} - {df['year'].max()}")
    st.sidebar.metric("Score M√©dio", f"{df['review_score'].mean():.2f}")
    
    # 1. VIS√ÉO GERAL
    st.markdown('<h2 class="section-header">üéØ Vis√£o Geral da Satisfa√ß√£o</h2>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Score M√©dio", f"{df['review_score'].mean():.2f}")
    
    with col2:
        st.metric("Score Mediano", f"{df['review_score'].median():.1f}")
    
    with col3:
        st.metric("Score Modal", f"{df['review_score'].mode().iloc[0]:.0f}")
    
    with col4:
        st.metric("Desvio Padr√£o", f"{df['review_score'].std():.2f}")
    
    # Distribui√ß√£o de scores
    st.subheader("üìä Distribui√ß√£o das Pontua√ß√µes")
    
    score_counts = df['review_score'].value_counts().sort_index()
    
    # Gr√°fico Plotly
    fig = px.bar(
        x=score_counts.index, 
        y=score_counts.values,
        title="Distribui√ß√£o de Scores dos Reviews",
        labels={'x': 'Score', 'y': 'Quantidade de Reviews'},
        color=score_counts.values,
        color_continuous_scale='viridis'
    )
    
    fig.update_layout(
        height=400,
        showlegend=False
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 2. TEND√äNCIA TEMPORAL
    st.markdown('<h2 class="section-header">üìà Tend√™ncia de Satisfa√ß√£o</h2>', unsafe_allow_html=True)
    
    # Filtro de ano
    years = sorted(df['year'].unique())
    selected_year = st.selectbox("Selecione o ano:", years, index=len(years)-1)
    
    df_year = df[df['year'] == selected_year]
    
    if len(df_year) > 0:
        monthly_avg = df_year.groupby('month')['review_score'].mean().reset_index()
        
        # Gr√°fico de linha
        fig = px.line(
            monthly_avg,
            x='month',
            y='review_score',
            title=f'Evolu√ß√£o da Satisfa√ß√£o M√©dia - {selected_year}',
            labels={'month': 'M√™s', 'review_score': 'Score M√©dio'},
            markers=True
        )
        
        fig.update_layout(height=400)
        fig.update_xaxes(tickmode='linear', tick0=1, dtick=1)
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela de dados
        st.subheader("üìã Dados Mensais")
        monthly_stats = df_year.groupby('month')['review_score'].agg(['mean', 'count']).reset_index()
        monthly_stats.columns = ['M√™s', 'Score M√©dio', 'Quantidade']
        st.dataframe(monthly_stats, use_container_width=True)
    
    # 3. AN√ÅLISE DE T√ìPICOS
    st.markdown('<h2 class="section-header">üîç An√°lise de T√≥picos</h2>', unsafe_allow_html=True)
    
    stop_words = get_stopwords()
    
    # Separa reviews por score
    positive_reviews = df[df['review_score'].isin([4, 5])]['review_comment_message'].tolist()
    negative_reviews = df[df['review_score'].isin([1, 2])]['review_comment_message'].tolist()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üòä Reviews Positivos (Score 4-5)")
        
        if len(positive_reviews) > 0:
            positive_words = get_word_frequency(positive_reviews, stop_words, top_n=10)
            
            if positive_words:
                words, counts = zip(*positive_words)
                
                fig = px.bar(
                    x=counts,
                    y=words,
                    orientation='h',
                    title="Palavras Mais Frequentes em Reviews Positivos",
                    labels={'x': 'Frequ√™ncia', 'y': 'Palavras'},
                    color=counts,
                    color_continuous_scale='greens'
                )
                
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("N√£o h√° palavras suficientes para an√°lise")
        else:
            st.warning("N√£o h√° reviews positivos suficientes")
    
    with col2:
        st.subheader("üòû Reviews Negativos (Score 1-2)")
        
        if len(negative_reviews) > 0:
            negative_words = get_word_frequency(negative_reviews, stop_words, top_n=10)
            
            if negative_words:
                words, counts = zip(*negative_words)
                
                fig = px.bar(
                    x=counts,
                    y=words,
                    orientation='h',
                    title="Palavras Mais Frequentes em Reviews Negativos",
                    labels={'x': 'Frequ√™ncia', 'y': 'Palavras'},
                    color=counts,
                    color_continuous_scale='reds'
                )
                
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("N√£o h√° palavras suficientes para an√°lise")
        else:
            st.warning("N√£o h√° reviews negativos suficientes")
    
    # 4. RESUMO
    st.markdown('<h2 class="section-header">üìã Resumo e Recomenda√ß√µes</h2>', unsafe_allow_html=True)
    
    # Calcula m√©tricas
    total_reviews = len(df)
    positive_pct = len(df[df['review_score'].isin([4, 5])]) / total_reviews * 100
    negative_pct = len(df[df['review_score'].isin([1, 2])]) / total_reviews * 100
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Principais Insights")
        st.metric("Satisfa√ß√£o Geral", f"{positive_pct:.1f}%")
        st.metric("Insatisfa√ß√£o", f"{negative_pct:.1f}%")
        
        if positive_pct > 70:
            st.success("‚úÖ Excelente satisfa√ß√£o geral!")
        elif positive_pct > 50:
            st.info("üìä Satisfa√ß√£o moderada. H√° espa√ßo para melhorias.")
        else:
            st.error("‚ö†Ô∏è Baixa satisfa√ß√£o. A√ß√£o necess√°ria.")
    
    with col2:
        st.subheader("üöÄ Recomenda√ß√µes")
        
        recommendations = []
        
        if negative_pct > 20:
            recommendations.append("üîç Investigar causas da insatisfa√ß√£o")
        
        if df['review_score'].std() > 1.5:
            recommendations.append("üìä Analisar inconsist√™ncias na qualidade")
        
        if len(negative_reviews) > 100:
            recommendations.append("üéØ Implementar melhorias baseadas em feedback")
        
        if not recommendations:
            recommendations.append("üìà Manter monitoramento cont√≠nuo")
        
        for rec in recommendations:
            st.write(f"‚Ä¢ {rec}")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        <p>üìä Dashboard Olist Reviews - Vers√£o Simplificada</p>
        <p>üöÄ Otimizado para ambientes cloud sem matplotlib</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 